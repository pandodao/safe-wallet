// Code generated by "enumer -type=TransferStatus -trimprefix=TransferStatus -json"; DO NOT EDIT.

package core

import (
	"encoding/json"
	"fmt"
)

const _TransferStateName = "PendingAssignedHandled"

var _TransferStateIndex = [...]uint8{0, 7, 15, 22}

func (i TransferStatus) String() string {
	i -= 1
	if i >= TransferStatus(len(_TransferStateIndex)-1) {
		return fmt.Sprintf("TransferStatus(%d)", i+1)
	}
	return _TransferStateName[_TransferStateIndex[i]:_TransferStateIndex[i+1]]
}

var _TransferStateValues = []TransferStatus{1, 2, 3}

var _TransferStateNameToValueMap = map[string]TransferStatus{
	_TransferStateName[0:7]:   1,
	_TransferStateName[7:15]:  2,
	_TransferStateName[15:22]: 3,
}

// TransferStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TransferStateString(s string) (TransferStatus, error) {
	if val, ok := _TransferStateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TransferStatus values", s)
}

// TransferStateValues returns all values of the enum
func TransferStateValues() []TransferStatus {
	return _TransferStateValues
}

// IsATransferState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TransferStatus) IsATransferState() bool {
	for _, v := range _TransferStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TransferStatus
func (i TransferStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TransferStatus
func (i *TransferStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TransferStatus should be a string, got %s", data)
	}

	var err error
	*i, err = TransferStateString(s)
	return err
}
